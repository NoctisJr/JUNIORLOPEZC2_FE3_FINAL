{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Junior\\\\Documents\\\\DIGITAL HOUSE\\\\Front end 3 - C2\\\\EJERCICIOS\\\\fe3-final\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer, useEffect, useMemo } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TOGGLE_THEME = 'TOGGLE_THEME';\nconst SET_DATA = 'SET_DATA';\nexport const initialState = {\n  theme: \"light\",\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext(initialState);\n\nconst themeReducer = (state, action) => {\n  switch (action.type) {\n    case TOGGLE_THEME:\n      return { ...state,\n        theme: state.theme === 'light' ? 'dark' : 'light'\n      };\n\n    case SET_DATA:\n      return { ...state,\n        data: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [state, dispatch] = useReducer(themeReducer, initialState);\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch('URL_DE_LA_API'); // Cambia esto por la URL de tu API\n\n      const data = await response.json();\n      dispatch({\n        type: SET_DATA,\n        payload: data\n      });\n    };\n\n    fetchData();\n  }, []); // Función para alternar el tema\n\n  const toggleTheme = () => {\n    dispatch({\n      type: TOGGLE_THEME\n    });\n  }; // Memoriza el valor del contexto\n\n\n  const value = useMemo(() => ({\n    state,\n    toggleTheme\n  }), [state]);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      value\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"a46cuc9bSUw3Ma7EWOFp73S/Du4=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useEffect","useMemo","TOGGLE_THEME","SET_DATA","initialState","theme","data","ContextGlobal","themeReducer","state","action","type","payload","ContextProvider","children","dispatch","fetchData","response","fetch","json","toggleTheme","value"],"sources":["C:/Users/Junior/Documents/DIGITAL HOUSE/Front end 3 - C2/EJERCICIOS/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import React, { createContext, useReducer, useEffect, useMemo } from 'react';\r\n\r\n\r\nconst TOGGLE_THEME = 'TOGGLE_THEME';\r\nconst SET_DATA = 'SET_DATA';\r\n\r\nexport const initialState = {theme: \"light\", data: []}\r\n\r\nexport const ContextGlobal = createContext(initialState);\r\n\r\nconst themeReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case TOGGLE_THEME:\r\n      return {\r\n        ...state,\r\n        theme: state.theme === 'light' ? 'dark' : 'light',\r\n      };\r\n    case SET_DATA:\r\n      return {\r\n        ...state,\r\n        data: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\r\n  const [state, dispatch] = useReducer(themeReducer, initialState);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await fetch('URL_DE_LA_API'); // Cambia esto por la URL de tu API\r\n      const data = await response.json();\r\n      dispatch({ type: SET_DATA, payload: data });\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Función para alternar el tema\r\n  const toggleTheme = () => {\r\n    dispatch({ type: TOGGLE_THEME });\r\n  };\r\n\r\n  // Memoriza el valor del contexto\r\n  const value = useMemo(() => ({\r\n    state,\r\n    toggleTheme,\r\n  }), [state]);\r\n\r\n  return (\r\n    <ContextGlobal.Provider value={{value}}>\r\n      {children}\r\n    </ContextGlobal.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,EAAsDC,OAAtD,QAAqE,OAArE;;AAGA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AAEA,OAAO,MAAMC,YAAY,GAAG;EAACC,KAAK,EAAE,OAAR;EAAiBC,IAAI,EAAE;AAAvB,CAArB;AAEP,OAAO,MAAMC,aAAa,gBAAGT,aAAa,CAACM,YAAD,CAAnC;;AAEP,MAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACtC,QAAQA,MAAM,CAACC,IAAf;IACE,KAAKT,YAAL;MACE,OAAO,EACL,GAAGO,KADE;QAELJ,KAAK,EAAEI,KAAK,CAACJ,KAAN,KAAgB,OAAhB,GAA0B,MAA1B,GAAmC;MAFrC,CAAP;;IAIF,KAAKF,QAAL;MACE,OAAO,EACL,GAAGM,KADE;QAELH,IAAI,EAAEI,MAAM,CAACE;MAFR,CAAP;;IAIF;MACE,OAAOH,KAAP;EAZJ;AAcD,CAfD;;AAiBA,OAAO,MAAMI,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C;EACA,MAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBhB,UAAU,CAACS,YAAD,EAAeJ,YAAf,CAApC;EAEAJ,SAAS,CAAC,MAAM;IACd,MAAMgB,SAAS,GAAG,YAAY;MAC5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAD,CAA5B,CAD4B,CACmB;;MAC/C,MAAMZ,IAAI,GAAG,MAAMW,QAAQ,CAACE,IAAT,EAAnB;MACAJ,QAAQ,CAAC;QAAEJ,IAAI,EAAER,QAAR;QAAkBS,OAAO,EAAEN;MAA3B,CAAD,CAAR;IACD,CAJD;;IAKAU,SAAS;EACV,CAPQ,EAON,EAPM,CAAT,CAJ+C,CAa/C;;EACA,MAAMI,WAAW,GAAG,MAAM;IACxBL,QAAQ,CAAC;MAAEJ,IAAI,EAAET;IAAR,CAAD,CAAR;EACD,CAFD,CAd+C,CAkB/C;;;EACA,MAAMmB,KAAK,GAAGpB,OAAO,CAAC,OAAO;IAC3BQ,KAD2B;IAE3BW;EAF2B,CAAP,CAAD,EAGjB,CAACX,KAAD,CAHiB,CAArB;EAKA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAACY;IAAD,CAA/B;IAAA,UACGP;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CA7BM;;GAAMD,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}